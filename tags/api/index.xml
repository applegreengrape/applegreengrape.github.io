<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on DevOps | AWS | GCP | Golang | Python </title>
    <link>/tags/api/</link>
    <description>Recent content in API on DevOps | AWS | GCP | Golang | Python </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 03 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Payment Gateway | Go | Stripe | Vault</title>
      <link>/posts/go-payment-gateway-with-stripe-and-vault/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-payment-gateway-with-stripe-and-vault/</guid>
      <description>In my previous posts, I have talked about how to build your own Google NLP API. You are a smart developer and you got a great idea ðŸ’¡. You build an amazing API with useful functions. The only thing you are missing is a validated business case. I think the eaiset way to prove the use case is to put it in the market and see whether or not people are willing to pay for it.</description>
    </item>
    
    <item>
      <title>Go NLP API | Build Your Own </title>
      <link>/posts/go-nlp-api/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-nlp-api/</guid>
      <description>In my previous posts, I have talked about building a small backend server to handle HTTP POST request. We also have tried out the Google NLP and we dived into the topic of NLTK. Well, now we know how to create a Go function to handle HTTP request and we understand the idea of Natural language Processing. Why not building your own Google NLP API?
Let&amp;rsquo;s now look at the key functions // Now we need to create a function to parse and tag all the data // There is a pre-built lib you can use - &amp;#34;gopkg.</description>
    </item>
    
  </channel>
</rss>